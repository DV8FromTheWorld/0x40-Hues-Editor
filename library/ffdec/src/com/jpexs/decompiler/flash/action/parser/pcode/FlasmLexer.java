/* The following code was generated by JFlex 1.6.0 */

/*
 *  Copyright (C) 2010-2015 JPEXS, All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */
/* Flash assembler language lexer specification */
package com.jpexs.decompiler.flash.action.parser.pcode;

import com.jpexs.decompiler.flash.action.parser.ActionParseException;
import com.jpexs.decompiler.flash.action.swf4.ConstantIndex;
import com.jpexs.decompiler.flash.action.swf4.RegisterNumber;
import com.jpexs.decompiler.flash.ecma.Null;
import com.jpexs.decompiler.flash.ecma.Undefined;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file
 * <tt>C:/Projects/FFDec/jpexs-decompiler/libsrc/ffdec_lib/lexers/actionscript_pcode.flex</tt>
 */
public final class FlasmLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    public static final int STRING = 2;

    public static final int PARAMETERS = 4;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1, 2, 2
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\6\1\4\1\2\1\51\1\52\1\1\16\6\4\0\1\4\1\0"
            + "\1\45\1\0\1\5\2\0\1\47\3\0\1\37\1\0\1\30\1\35"
            + "\1\0\1\33\11\11\1\12\1\3\5\0\4\40\1\36\1\40\2\7"
            + "\1\31\4\7\1\34\14\7\1\0\1\41\2\0\1\10\1\0\1\22"
            + "\1\46\1\43\1\26\1\20\1\21\1\42\1\7\1\27\2\7\1\23"
            + "\1\7\1\25\1\44\2\7\1\16\1\24\1\15\1\17\2\7\1\50"
            + "\1\32\1\7\1\13\1\0\1\14\1\0\6\6\1\53\32\6\2\0"
            + "\4\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0"
            + "\27\5\1\0\37\5\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0"
            + "\1\5\1\0\1\5\21\0\160\6\5\5\1\0\2\5\2\0\4\5"
            + "\10\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5\1\0\123\5"
            + "\1\0\213\5\1\0\5\6\2\0\236\5\11\0\46\5\2\0\1\5"
            + "\7\0\47\5\7\0\1\5\1\0\55\6\1\0\1\6\1\0\2\6"
            + "\1\0\2\6\1\0\1\6\10\0\33\5\5\0\3\5\15\0\5\6"
            + "\6\0\1\5\4\0\13\6\5\0\53\5\37\6\4\0\2\5\1\6"
            + "\143\5\1\0\1\5\10\6\1\0\6\6\2\5\2\6\1\0\4\6"
            + "\2\5\12\6\3\5\2\0\1\5\17\0\1\6\1\5\1\6\36\5"
            + "\33\6\2\0\131\5\13\6\1\5\16\0\12\6\41\5\11\6\2\5"
            + "\4\0\1\5\5\0\26\5\4\6\1\5\11\6\1\5\3\6\1\5"
            + "\5\6\22\0\31\5\3\6\104\0\1\5\1\0\13\5\67\0\33\6"
            + "\1\0\4\6\66\5\3\6\1\5\22\6\1\5\7\6\12\5\2\6"
            + "\2\0\12\6\1\0\7\5\1\0\7\5\1\0\3\6\1\0\10\5"
            + "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5\3\0\4\5"
            + "\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\1\5\10\0"
            + "\1\6\4\0\2\5\1\0\3\5\2\6\2\0\12\6\4\5\7\0"
            + "\1\5\5\0\3\6\1\0\6\5\4\0\2\5\2\0\26\5\1\0"
            + "\7\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6\1\0"
            + "\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\5\1\0"
            + "\1\5\7\0\14\6\3\5\1\6\13\0\3\6\1\0\11\5\1\0"
            + "\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0"
            + "\1\6\1\5\10\6\1\0\3\6\1\0\3\6\2\0\1\5\17\0"
            + "\2\5\2\6\2\0\12\6\1\0\1\5\17\0\3\6\1\0\10\5"
            + "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"
            + "\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\10\0\2\6"
            + "\4\0\2\5\1\0\3\5\2\6\2\0\12\6\1\0\1\5\20\0"
            + "\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"
            + "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5"
            + "\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\5\6\0\1\6"
            + "\16\0\12\6\11\0\1\5\7\0\3\6\1\0\10\5\1\0\3\5"
            + "\1\0\27\5\1\0\12\5\1\0\5\5\3\0\1\5\7\6\1\0"
            + "\3\6\1\0\4\6\7\0\2\6\1\0\2\5\6\0\2\5\2\6"
            + "\2\0\12\6\22\0\2\6\1\0\10\5\1\0\3\5\1\0\27\5"
            + "\1\0\12\5\1\0\5\5\2\0\1\6\1\5\7\6\1\0\3\6"
            + "\1\0\4\6\7\0\2\6\7\0\1\5\1\0\2\5\2\6\2\0"
            + "\12\6\1\0\2\5\17\0\2\6\1\0\10\5\1\0\3\5\1\0"
            + "\51\5\2\0\1\5\7\6\1\0\3\6\1\0\4\6\1\5\10\0"
            + "\1\6\10\0\2\5\2\6\2\0\12\6\12\0\6\5\2\0\2\6"
            + "\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5"
            + "\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\22\0\2\6"
            + "\15\0\60\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0\12\6"
            + "\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5"
            + "\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5"
            + "\2\0\2\5\1\0\4\5\1\6\2\5\6\6\1\0\2\6\1\5"
            + "\2\0\5\5\1\0\1\5\1\0\6\6\2\0\12\6\2\0\4\5"
            + "\40\0\1\5\27\0\2\6\6\0\12\6\13\0\1\6\1\0\1\6"
            + "\1\0\1\6\4\0\2\6\10\5\1\0\44\5\4\0\24\6\1\0"
            + "\2\6\5\5\13\6\1\0\44\6\11\0\1\6\71\0\53\5\24\6"
            + "\1\5\12\6\6\0\6\5\4\6\4\5\3\6\1\5\3\6\2\5"
            + "\7\6\3\5\4\6\15\5\14\6\1\5\17\6\2\0\46\5\1\0"
            + "\1\5\5\0\1\5\2\0\53\5\1\0\u014d\5\1\0\4\5\2\0"
            + "\7\5\1\0\1\5\1\0\4\5\2\0\51\5\1\0\4\5\2\0"
            + "\41\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0"
            + "\17\5\1\0\71\5\1\0\4\5\2\0\103\5\2\0\3\6\40\0"
            + "\20\5\20\0\125\5\14\0\u026c\5\2\0\21\5\1\0\32\5\5\0"
            + "\113\5\3\0\3\5\17\0\15\5\1\0\4\5\3\6\13\0\22\5"
            + "\3\6\13\0\22\5\2\6\14\0\15\5\1\0\3\5\1\0\2\6"
            + "\14\0\64\5\40\6\3\0\1\5\3\0\2\5\1\6\2\0\12\6"
            + "\41\0\3\6\2\0\12\6\6\0\130\5\10\0\51\5\1\6\1\5"
            + "\5\0\106\5\12\0\35\5\3\0\14\6\4\0\14\6\12\0\12\6"
            + "\36\5\2\0\5\5\13\0\54\5\4\0\21\6\7\5\2\6\6\0"
            + "\12\6\46\0\27\5\5\6\4\0\65\5\12\6\1\0\35\6\2\0"
            + "\13\6\6\0\12\6\15\0\1\5\130\0\5\6\57\5\21\6\7\5"
            + "\4\0\12\6\21\0\11\6\14\0\3\6\36\5\15\6\2\5\12\6"
            + "\54\5\16\6\14\0\44\5\24\6\10\0\12\6\3\0\3\5\12\6"
            + "\44\5\122\0\3\6\1\0\25\6\4\5\1\6\4\5\3\6\2\5"
            + "\11\0\300\5\47\6\25\0\4\6\u0116\5\2\0\6\5\2\0\46\5"
            + "\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5"
            + "\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5"
            + "\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5"
            + "\1\0\7\5\16\0\5\6\30\0\1\51\1\51\5\6\20\0\2\5"
            + "\23\0\1\5\13\0\5\6\5\0\6\6\1\0\1\5\15\0\1\5"
            + "\20\0\15\5\3\0\33\5\25\0\15\6\4\0\1\6\3\0\14\6"
            + "\21\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5"
            + "\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5"
            + "\2\0\4\5\5\0\5\5\4\0\1\5\21\0\51\5\u0a77\0\57\5"
            + "\1\0\57\5\1\0\205\5\6\0\4\5\3\6\2\5\14\0\46\5"
            + "\1\0\1\5\5\0\1\5\2\0\70\5\7\0\1\5\17\0\1\6"
            + "\27\5\11\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"
            + "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\40\6\57\0"
            + "\1\5\u01d5\0\3\5\31\0\11\5\6\6\1\0\5\5\2\0\5\5"
            + "\4\0\126\5\2\0\2\6\2\0\3\5\1\0\132\5\1\0\4\5"
            + "\5\0\51\5\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0\u19b6\5"
            + "\112\0\u51cd\5\63\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0\20\5"
            + "\12\6\2\5\24\0\57\5\1\6\4\0\12\6\1\0\31\5\7\0"
            + "\1\6\120\5\2\6\45\0\11\5\2\0\147\5\2\0\4\5\1\0"
            + "\4\5\14\0\13\5\115\0\12\5\1\6\3\5\1\6\4\5\1\6"
            + "\27\5\5\6\20\0\1\5\7\0\64\5\14\0\2\6\62\5\21\6"
            + "\13\0\12\6\6\0\22\6\6\5\3\0\1\5\4\0\12\6\34\5"
            + "\10\6\2\0\27\5\15\6\14\0\35\5\3\0\4\6\57\5\16\6"
            + "\16\0\1\5\12\6\46\0\51\5\16\6\11\0\3\5\1\6\10\5"
            + "\2\6\2\0\12\6\6\0\27\5\3\0\1\5\1\6\4\0\60\5"
            + "\1\6\1\5\3\6\2\5\2\6\5\5\2\6\1\5\1\6\1\5"
            + "\30\0\3\5\2\0\13\5\5\6\2\0\3\5\2\6\12\0\6\5"
            + "\2\0\6\5\2\0\6\5\11\0\7\5\1\0\7\5\221\0\43\5"
            + "\10\6\1\0\2\6\2\0\12\6\6\0\u2ba4\5\14\0\27\5\4\0"
            + "\61\5\u2104\0\u016e\5\2\0\152\5\46\0\7\5\14\0\5\5\5\0"
            + "\1\5\1\6\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0"
            + "\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0"
            + "\66\5\50\0\15\5\3\0\20\6\20\0\7\6\14\0\2\5\30\0"
            + "\3\5\31\0\1\5\6\0\5\5\1\0\207\5\2\0\1\6\4\0"
            + "\1\5\13\0\12\6\7\0\32\5\4\0\1\5\1\0\32\5\13\0"
            + "\131\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0"
            + "\2\5\3\0\2\5\22\0\3\6\4\0\14\5\1\0\32\5\1\0"
            + "\23\5\1\0\2\5\1\0\17\5\2\0\16\5\42\0\173\5\105\0"
            + "\65\5\210\0\1\6\202\0\35\5\3\0\61\5\57\0\37\5\21\0"
            + "\33\5\65\0\36\5\2\0\44\5\4\0\10\5\1\0\5\5\52\0"
            + "\236\5\2\0\12\6\u0356\0\6\5\2\0\1\5\1\0\54\5\1\0"
            + "\2\5\3\0\1\5\2\0\27\5\252\0\26\5\12\0\32\5\106\0"
            + "\70\5\6\0\2\5\100\0\1\5\3\6\1\0\2\6\5\0\4\6"
            + "\4\5\1\0\3\5\1\0\33\5\4\0\3\6\4\0\1\6\40\0"
            + "\35\5\203\0\66\5\12\0\26\5\12\0\23\5\215\0\111\5\u03b7\0"
            + "\3\6\65\5\17\6\37\0\12\6\20\0\3\6\55\5\13\6\2\0"
            + "\1\6\22\0\31\5\7\0\12\6\6\0\3\6\44\5\16\6\1\0"
            + "\12\6\100\0\3\6\60\5\16\6\4\5\13\0\12\6\u04a6\0\53\5"
            + "\15\6\10\0\12\6\u0936\0\u036f\5\221\0\143\5\u0b9d\0\u042f\5\u33d1\0"
            + "\u0239\5\u04c7\0\105\5\13\0\1\5\56\6\20\0\4\6\15\5\u4060\0"
            + "\2\5\u2163\0\5\6\3\0\26\6\2\0\7\6\36\0\4\6\224\0"
            + "\3\6\u01bb\0\125\5\1\0\107\5\1\0\2\5\2\0\1\5\2\0"
            + "\2\5\2\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5\1\0"
            + "\101\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0\34\5\1\0"
            + "\4\5\1\0\5\5\1\0\1\5\3\0\7\5\1\0\u0154\5\2\0"
            + "\31\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0\37\5\1\0"
            + "\31\5\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0"
            + "\10\5\2\0\62\6\u1600\0\4\5\1\0\33\5\1\0\2\5\1\0"
            + "\1\5\2\0\1\5\1\0\12\5\1\0\4\5\1\0\1\5\1\0"
            + "\1\5\6\0\1\5\4\0\1\5\1\0\1\5\1\0\1\5\1\0"
            + "\3\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\5\1\0"
            + "\1\5\1\0\1\5\1\0\1\5\1\0\2\5\1\0\1\5\2\0"
            + "\4\5\1\0\7\5\1\0\4\5\1\0\4\5\1\0\1\5\1\0"
            + "\12\5\1\0\21\5\5\0\3\5\1\0\5\5\1\0\21\5\u1144\0"
            + "\ua6d7\5\51\0\u1035\5\13\0\336\5\u3fe2\0\u021e\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"
            + "\1\6\36\0\140\6\200\0\360\6\uffff\0\uffff\0\ufe12\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\3\0\3\1\1\2\1\3\1\4\2\5\1\1\1\6"
            + "\2\7\1\10\1\11\1\12\1\13\5\11\1\1\1\11"
            + "\1\12\1\11\1\1\1\11\1\14\1\0\1\15\1\16"
            + "\1\17\1\20\1\16\1\21\1\22\1\23\1\24\1\25"
            + "\1\26\1\16\1\0\1\27\5\11\2\0\1\11\1\27"
            + "\2\11\2\0\1\27\1\0\5\11\1\0\1\11\1\27"
            + "\1\11\1\0\1\30\1\31\3\11\1\32\1\0\4\11"
            + "\1\33\1\0\4\11\1\0\4\11\1\0\4\11\1\0"
            + "\1\11\2\34\1\35\1\27\2\36";

    private static int[] zzUnpackAction() {
        int[] result = new int[106];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */

        int j = offset;  /* index in unpacked array */

        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\204"
            + "\0\u0134\0\u0160\0\204\0\u018c\0\204\0\u01b8\0\204\0\u01e4"
            + "\0\u0210\0\u023c\0\204\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318"
            + "\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420\0\204\0\334"
            + "\0\204\0\204\0\204\0\204\0\u044c\0\204\0\204\0\204"
            + "\0\204\0\204\0\204\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528"
            + "\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u03f4\0\u0604\0\u039c\0\u0630"
            + "\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u06e0\0\u070c\0\u0738\0\u0764"
            + "\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0210\0\u0840\0\u0478\0\204"
            + "\0\u0210\0\u086c\0\u0898\0\u08c4\0\u0210\0\u08f0\0\u091c\0\u0948"
            + "\0\u0974\0\u09a0\0\u0210\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c"
            + "\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc"
            + "\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0210\0\u0210\0\204"
            + "\0\u0ce4\0\u0210";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[106];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */

        int j = offset;  /* index in unpacked array */

        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\4\4\1\5\1\6\1\4\1\7\1\6\3\4\1\10"
            + "\13\7\1\4\2\7\1\4\1\7\1\4\1\7\1\4"
            + "\1\7\1\4\3\7\1\4\1\7\1\4\1\7\1\4"
            + "\1\5\1\4\1\11\1\12\1\13\36\11\1\14\3\11"
            + "\1\15\6\11\1\4\1\16\1\17\1\20\1\4\1\21"
            + "\1\4\2\21\1\22\1\4\1\23\1\4\1\24\1\25"
            + "\1\26\1\21\1\27\3\21\1\30\2\21\1\31\1\32"
            + "\1\21\1\33\1\34\1\35\1\21\1\4\1\21\1\4"
            + "\1\21\1\36\1\21\1\37\1\21\1\4\1\21\3\4"
            + "\60\0\1\5\45\0\1\5\6\0\5\40\1\41\2\0"
            + "\13\40\1\0\4\40\1\0\1\40\1\0\1\40\1\0"
            + "\3\40\1\0\1\40\1\0\1\40\2\0\1\40\5\0"
            + "\2\40\3\7\1\41\2\0\13\7\1\0\4\7\1\0"
            + "\1\7\1\0\1\7\1\0\3\7\1\0\1\7\1\0"
            + "\1\7\2\0\1\40\1\11\2\0\36\11\1\0\3\11"
            + "\1\0\6\11\2\0\1\13\51\0\1\42\2\0\12\42"
            + "\1\43\1\44\1\45\1\42\1\46\3\42\1\47\13\42"
            + "\1\50\3\42\1\51\1\52\1\53\1\54\5\0\1\17"
            + "\51\0\1\20\2\0\51\20\5\0\5\21\3\0\13\21"
            + "\1\0\4\21\1\0\1\21\1\0\1\21\1\0\3\21"
            + "\1\0\1\21\1\0\1\21\2\0\1\21\11\0\1\22"
            + "\6\0\1\55\12\0\1\22\1\0\1\56\1\55\22\0"
            + "\5\21\3\0\1\21\1\57\11\21\1\0\4\21\1\0"
            + "\1\21\1\0\1\21\1\0\3\21\1\0\1\21\1\0"
            + "\1\21\2\0\1\21\5\0\5\21\3\0\3\21\1\60"
            + "\7\21\1\0\4\21\1\0\1\21\1\0\1\21\1\0"
            + "\3\21\1\0\1\21\1\0\1\21\2\0\1\21\5\0"
            + "\5\21\3\0\10\21\1\61\2\21\1\0\4\21\1\0"
            + "\1\21\1\0\1\21\1\0\3\21\1\0\1\21\1\0"
            + "\1\21\2\0\1\21\5\0\5\21\3\0\5\21\1\62"
            + "\5\21\1\0\4\21\1\0\1\21\1\0\1\21\1\0"
            + "\3\21\1\0\1\21\1\0\1\21\2\0\1\21\5\0"
            + "\5\21\3\0\2\21\1\63\10\21\1\0\4\21\1\0"
            + "\1\21\1\0\1\21\1\0\3\21\1\0\1\21\1\0"
            + "\1\21\2\0\1\21\11\0\1\22\17\0\1\64\1\0"
            + "\1\33\1\0\1\65\23\0\5\21\3\0\10\21\1\66"
            + "\2\21\1\0\4\21\1\0\1\21\1\0\1\21\1\0"
            + "\3\21\1\0\1\21\1\0\1\21\2\0\1\21\11\0"
            + "\1\67\6\0\1\55\12\0\1\67\1\0\1\56\1\55"
            + "\22\0\5\21\3\0\5\21\1\70\5\21\1\0\4\21"
            + "\1\0\1\21\1\0\1\21\1\0\3\21\1\0\1\21"
            + "\1\0\1\21\2\0\1\21\11\0\1\56\21\0\1\56"
            + "\25\0\5\21\3\0\13\21\1\0\4\21\1\0\1\21"
            + "\1\0\1\21\1\0\2\21\1\71\1\0\1\21\1\0"
            + "\1\21\2\0\1\21\11\0\1\72\6\0\3\72\3\0"
            + "\1\72\4\0\1\72\2\0\1\72\1\0\1\72\2\0"
            + "\1\72\2\0\1\72\16\0\1\73\6\0\3\73\3\0"
            + "\1\73\4\0\1\73\2\0\1\73\1\0\1\73\2\0"
            + "\1\73\2\0\1\73\16\0\1\74\16\0\1\75\2\0"
            + "\1\74\3\0\1\75\25\0\1\56\6\0\1\55\12\0"
            + "\1\56\2\0\1\55\22\0\5\21\3\0\2\21\1\76"
            + "\10\21\1\0\4\21\1\0\1\21\1\0\1\21\1\0"
            + "\3\21\1\0\1\21\1\0\1\21\2\0\1\21\5\0"
            + "\5\21\3\0\13\21\1\0\4\21\1\0\1\21\1\0"
            + "\1\21\1\0\1\77\2\21\1\0\1\21\1\0\1\21"
            + "\2\0\1\21\5\0\5\21\3\0\11\21\1\100\1\21"
            + "\1\0\4\21\1\0\1\21\1\0\1\21\1\0\3\21"
            + "\1\0\1\21\1\0\1\21\2\0\1\21\5\0\5\21"
            + "\3\0\6\21\1\101\4\21\1\0\4\21\1\0\1\21"
            + "\1\0\1\21\1\0\3\21\1\0\1\21\1\0\1\21"
            + "\2\0\1\21\5\0\5\21\3\0\6\21\1\102\4\21"
            + "\1\0\4\21\1\0\1\21\1\0\1\21\1\0\3\21"
            + "\1\0\1\21\1\0\1\21\2\0\1\21\25\0\1\103"
            + "\33\0\5\21\3\0\4\21\1\104\6\21\1\0\4\21"
            + "\1\0\1\21\1\0\1\21\1\0\3\21\1\0\1\21"
            + "\1\0\1\21\2\0\1\21\5\0\5\21\3\0\13\21"
            + "\1\0\3\21\1\105\1\0\1\21\1\0\1\21\1\0"
            + "\3\21\1\0\1\21\1\0\1\21\2\0\1\21\5\0"
            + "\5\21\3\0\10\21\1\106\2\21\1\0\4\21\1\0"
            + "\1\21\1\0\1\21\1\0\3\21\1\0\1\21\1\0"
            + "\1\21\2\0\1\21\11\0\1\107\6\0\3\107\3\0"
            + "\1\107\4\0\1\107\2\0\1\107\1\0\1\107\2\0"
            + "\1\107\2\0\1\107\16\0\1\110\6\0\3\110\3\0"
            + "\1\110\4\0\1\110\2\0\1\110\1\0\1\110\2\0"
            + "\1\110\2\0\1\110\16\0\1\74\21\0\1\74\25\0"
            + "\5\21\3\0\3\21\1\111\7\21\1\0\4\21\1\0"
            + "\1\21\1\0\1\21\1\0\3\21\1\0\1\21\1\0"
            + "\1\21\2\0\1\21\5\0\5\21\3\0\12\21\1\112"
            + "\1\0\4\21\1\0\1\21\1\0\1\21\1\0\3\21"
            + "\1\0\1\21\1\0\1\21\2\0\1\21\5\0\5\21"
            + "\3\0\3\21\1\113\7\21\1\0\4\21\1\0\1\21"
            + "\1\0\1\21\1\0\3\21\1\0\1\21\1\0\1\21"
            + "\2\0\1\21\5\0\5\21\3\0\7\21\1\114\3\21"
            + "\1\0\4\21\1\0\1\21\1\0\1\21\1\0\3\21"
            + "\1\0\1\21\1\0\1\21\2\0\1\21\5\0\5\21"
            + "\3\0\6\21\1\115\4\21\1\0\4\21\1\0\1\21"
            + "\1\0\1\21\1\0\3\21\1\0\1\21\1\0\1\21"
            + "\2\0\1\21\21\0\1\116\37\0\5\21\3\0\12\21"
            + "\1\117\1\0\4\21\1\0\1\21\1\0\1\21\1\0"
            + "\3\21\1\0\1\21\1\0\1\21\2\0\1\21\5\0"
            + "\5\21\3\0\7\21\1\120\3\21\1\0\4\21\1\0"
            + "\1\21\1\0\1\21\1\0\3\21\1\0\1\21\1\0"
            + "\1\21\2\0\1\21\5\0\5\21\3\0\7\21\1\121"
            + "\3\21\1\0\4\21\1\0\1\21\1\0\1\21\1\0"
            + "\3\21\1\0\1\21\1\0\1\21\2\0\1\21\5\0"
            + "\5\21\3\0\4\21\1\122\6\21\1\0\4\21\1\0"
            + "\1\21\1\0\1\21\1\0\3\21\1\0\1\21\1\0"
            + "\1\21\2\0\1\21\5\0\5\21\3\0\3\21\1\123"
            + "\7\21\1\0\4\21\1\0\1\21\1\0\1\21\1\0"
            + "\3\21\1\0\1\21\1\0\1\21\2\0\1\21\27\0"
            + "\1\124\31\0\5\21\3\0\10\21\1\125\2\21\1\0"
            + "\4\21\1\0\1\21\1\0\1\21\1\0\3\21\1\0"
            + "\1\21\1\0\1\21\2\0\1\21\5\0\5\21\3\0"
            + "\1\126\12\21\1\0\4\21\1\0\1\21\1\0\1\21"
            + "\1\0\3\21\1\0\1\21\1\0\1\21\2\0\1\21"
            + "\5\0\5\21\3\0\1\127\12\21\1\0\4\21\1\0"
            + "\1\21\1\0\1\21\1\0\3\21\1\0\1\21\1\0"
            + "\1\21\2\0\1\21\5\0\5\21\3\0\12\21\1\130"
            + "\1\0\4\21\1\0\1\21\1\0\1\21\1\0\3\21"
            + "\1\0\1\21\1\0\1\21\2\0\1\21\25\0\1\131"
            + "\33\0\5\21\3\0\12\21\1\132\1\0\4\21\1\0"
            + "\1\21\1\0\1\21\1\0\3\21\1\0\1\21\1\0"
            + "\1\21\2\0\1\21\5\0\5\21\3\0\5\21\1\133"
            + "\5\21\1\0\4\21\1\0\1\21\1\0\1\21\1\0"
            + "\3\21\1\0\1\21\1\0\1\21\2\0\1\21\5\0"
            + "\5\21\3\0\3\21\1\134\7\21\1\0\4\21\1\0"
            + "\1\21\1\0\1\21\1\0\3\21\1\0\1\21\1\0"
            + "\1\21\2\0\1\21\5\0\5\21\3\0\10\21\1\135"
            + "\2\21\1\0\4\21\1\0\1\21\1\0\1\21\1\0"
            + "\3\21\1\0\1\21\1\0\1\21\2\0\1\21\27\0"
            + "\1\136\31\0\5\21\3\0\1\137\12\21\1\0\4\21"
            + "\1\0\1\21\1\0\1\21\1\0\3\21\1\0\1\21"
            + "\1\0\1\21\2\0\1\21\5\0\5\21\3\0\10\21"
            + "\1\140\2\21\1\0\4\21\1\0\1\21\1\0\1\21"
            + "\1\0\3\21\1\0\1\21\1\0\1\21\2\0\1\21"
            + "\5\0\5\21\3\0\1\21\1\141\11\21\1\0\4\21"
            + "\1\0\1\21\1\0\1\21\1\0\3\21\1\0\1\21"
            + "\1\0\1\21\2\0\1\21\5\0\5\21\3\0\3\21"
            + "\1\142\7\21\1\0\4\21\1\0\1\21\1\0\1\21"
            + "\1\0\3\21\1\0\1\21\1\0\1\21\2\0\1\21"
            + "\15\0\1\143\43\0\5\21\3\0\13\21\1\0\1\21"
            + "\1\105\2\21\1\0\1\21\1\0\1\21\1\0\3\21"
            + "\1\0\1\21\1\0\1\21\2\0\1\21\5\0\5\21"
            + "\3\0\1\144\12\21\1\0\4\21\1\0\1\21\1\0"
            + "\1\21\1\0\3\21\1\0\1\21\1\0\1\21\2\0"
            + "\1\21\5\0\4\21\1\145\3\0\13\21\1\0\2\21"
            + "\1\146\1\21\1\0\1\21\1\0\1\21\1\0\3\21"
            + "\1\0\1\21\1\0\1\21\2\0\1\21\5\0\5\21"
            + "\3\0\11\21\1\147\1\21\1\0\4\21\1\0\1\21"
            + "\1\0\1\21\1\0\3\21\1\0\1\21\1\0\1\21"
            + "\2\0\1\21\32\0\1\150\26\0\4\21\1\151\3\0"
            + "\13\21\1\0\2\21\1\152\1\21\1\0\1\21\1\0"
            + "\1\21\1\0\3\21\1\0\1\21\1\0\1\21\2\0"
            + "\1\21\5\0\4\21\1\145\3\0\13\21\1\0\2\21"
            + "\1\145\1\21\1\0\1\21\1\0\1\21\1\0\3\21"
            + "\1\0\1\21\1\0\1\21\2\0\1\21\5\0\4\21"
            + "\1\151\3\0\13\21\1\0\2\21\1\151\1\21\1\0"
            + "\1\21\1\0\1\21\1\0\3\21\1\0\1\21\1\0"
            + "\1\21\2\0\1\21";

    private static int[] zzUnpackTrans() {
        int[] result = new int[3344];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */

        int j = offset;  /* index in unpacked array */

        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;

    private static final int ZZ_NO_MATCH = 1;

    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\3\0\1\11\3\1\1\11\2\1\1\11\1\1\1\11"
            + "\1\1\1\11\3\1\1\11\13\1\1\11\1\0\4\11"
            + "\1\1\6\11\1\1\1\0\6\1\2\0\4\1\2\0"
            + "\1\1\1\0\5\1\1\0\3\1\1\0\1\11\5\1"
            + "\1\0\5\1\1\0\4\1\1\0\4\1\1\0\4\1"
            + "\1\0\4\1\1\11\2\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[106];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */

        int j = offset;  /* index in unpacked array */

        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    StringBuffer string = new StringBuffer();

    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public FlasmLexer() {

    }

    public int yychar() {
        return yychar;
    }

    public int yyline() {
        return yyline + 1;
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public FlasmLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */

        int j = 0;  /* index in unpacked array */

        while (i < 2854) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int totalRead = 0;
        while (totalRead < requested) {
            int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
            if (numRead == -1) {
                break;
            }
            totalRead += numRead;
        }

        if (totalRead > 0) {
            zzEndRead += totalRead;
            if (totalRead == requested) { /* possibly more input available */

                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            return false;
        }

        // totalRead = 0: End of stream
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */

        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has
     * grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     * A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     * This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public ASMParsedSymbol yylex() throws java.io.IOException, ActionParseException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                    zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1: {
                }
                case 31:
                    break;
                case 2: {
                    yybegin(PARAMETERS);
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_INSTRUCTION_NAME, yytext());
                }
                case 32:
                    break;
                case 3: {
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_BLOCK_END);
                }
                case 33:
                    break;
                case 4: {
                    string.append(yytext());
                }
                case 34:
                    break;
                case 5: {
                    throw new ActionParseException("Unterminated string at end of line", yyline + 1);
                }
                case 35:
                    break;
                case 6: {
                    yybegin(PARAMETERS);
                    // length also includes the trailing quote
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_STRING, string.toString());
                }
                case 36:
                    break;
                case 7: {
                    yybegin(YYINITIAL);
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_EOL);
                }
                case 37:
                    break;
                case 8: {
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_COMMENT, yytext().substring(1));
                }
                case 38:
                    break;
                case 9: {
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_IDENTIFIER, yytext());
                }
                case 39:
                    break;
                case 10: {
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_INTEGER, Long.parseLong((yytext())));
                }
                case 40:
                    break;
                case 11: {
                    yybegin(YYINITIAL);
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_BLOCK_START);
                }
                case 41:
                    break;
                case 12: {
                    yybegin(STRING);
                    string.setLength(0);
                }
                case 42:
                    break;
                case 13: {
                    String s = yytext();
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_LABEL, s.substring(0, s.length() - 1));
                }
                case 43:
                    break;
                case 14: {
                    throw new ActionParseException("Illegal escape sequence \"" + yytext() + "\"", yyline + 1);
                }
                case 44:
                    break;
                case 15: {
                    string.append('\t');
                }
                case 45:
                    break;
                case 16: {
                    string.append('\r');
                }
                case 46:
                    break;
                case 17: {
                    string.append('\f');
                }
                case 47:
                    break;
                case 18: {
                    string.append('\n');
                }
                case 48:
                    break;
                case 19: {
                    string.append('\\');
                }
                case 49:
                    break;
                case 20: {
                    string.append('\"');
                }
                case 50:
                    break;
                case 21: {
                    string.append('\b');
                }
                case 51:
                    break;
                case 22: {
                    string.append('\'');
                }
                case 52:
                    break;
                case 23: {
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_FLOAT, Double.parseDouble((yytext())));
                }
                case 53:
                    break;
                case 24: {
                    char val = (char) Integer.parseInt(yytext().substring(2), 16);
                    string.append(val);
                }
                case 54:
                    break;
                case 25: {
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_BOOLEAN, Boolean.TRUE);
                }
                case 55:
                    break;
                case 26: {
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_NULL, new Null());
                }
                case 56:
                    break;
                case 27: {
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_BOOLEAN, Boolean.FALSE);
                }
                case 57:
                    break;
                case 28: {
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_REGISTER, new RegisterNumber(Integer.parseInt(yytext().substring(8))));
                }
                case 58:
                    break;
                case 29: {
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_UNDEFINED, new Undefined());
                }
                case 59:
                    break;
                case 30: {
                    return new ASMParsedSymbol(ASMParsedSymbol.TYPE_CONSTANT, new ConstantIndex(Integer.parseInt(yytext().substring(8))));
                }
                case 60:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        {
                            return new ASMParsedSymbol(ASMParsedSymbol.TYPE_EOF);
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }
}
